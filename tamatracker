import datetime

HAPPINESS_DECAY_RATE = {
    "baby": -60,  # bar/h, PLACEHOLDER
    "child": -1,  # bar/h, PLACEHOLDER
    "teen": -1,  # bar/h, PLACEHOLDER
    "adult": -1,  # bar/h, PLACEHOLDER
}
HUNGER_DECAY_RATE = {
    "baby": -60,  # bar/h, PLACEHOLDER
    "child": -1,  # bar/h, PLACEHOLDER
    "teen": -1,  # bar/h, PLACEHOLDER
    "adult": -1,  # bar/h, PLACEHOLDER
}


class Timeline:

    def __init__(self, tama):
        self.timeline = []
        self.tama = tama

    def add_event(self, timestamp, **kwargs):
        """
Adds an event to the timeline
        :param timestamp: Used to set up a timestamp for the event
        :type timestamp: list
        :param kwargs: May have optional parameters such as happiness, hunger and Tamagotchi stage
        :type happiness: int
        :type hunger: int
        :type stage: str
        """
        event = {
            "timestamp": datetime.datetime(*timestamp),
            "happiness": kwargs.get("happiness", None),
            "hunger": kwargs.get("hunger", None),
            "stage": kwargs.get("stage", None),
        }
        self.timeline.append(event)

    def remove_event(self, event):
        """
Removes an event from the timeline
        :param event: The number of the event; the order of events in the timeline starts from 1
        :type event: int
        """
        self.timeline.pop(event - 1)

    def predict_happiness(self, initial, stage):
        """
Predicts the time required for the happiness meter to drop to zero starting from the initial happiness
        :param initial: Defines the initial happiness
        :type initial: int
        :param stage: Defines the life stage of a Tamagotchi, so the function knows which decay rate to use
        :type stage: str
        :return: Returns time to zero happiness
        :rtype: float
        """
        decay_rate = HAPPINESS_DECAY_RATE.get(stage)

        time_to_zero = - initial / decay_rate
        return time_to_zero
