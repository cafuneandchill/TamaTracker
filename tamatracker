import datetime

HAPPINESS_DECAY_RATE = {
    "baby": -60,  # bar/h, PLACEHOLDER
    "child": -1,  # bar/h, PLACEHOLDER
    "teen": -1,  # bar/h, PLACEHOLDER
    "adult": -1,  # bar/h, PLACEHOLDER
}
HUNGER_DECAY_RATE = {
    "baby": -60,  # bar/h, PLACEHOLDER
    "child": -1,  # bar/h, PLACEHOLDER
    "teen": -1,  # bar/h, PLACEHOLDER
    "adult": -1,  # bar/h, PLACEHOLDER
}


def predict_happiness(initial, stage):
    """
Predicts the time required for the happiness meter to drop to zero starting from the initial happiness
    :param initial: Defines the initial happiness
    :type initial: int
    :param stage: Defines the life stage of a Tamagotchi, so the function knows which decay rate to use
    :type stage: str
    :return: Returns time to zero happiness
    :rtype: float
    """
    decay_rate = HAPPINESS_DECAY_RATE.get(stage)

    time_to_zero = - initial / decay_rate
    return time_to_zero


def predict_hunger(initial, stage):
    """
Predicts the time required for the hunger meter to drop to zero starting from the initial hunger
    :param initial: Defines the initial hunger
    :type initial: int
    :param stage: Defines the life stage of a Tamagotchi, so the function knows which decay rate to use
    :type stage: str
    :return: Returns time to zero hunger
    :rtype: float
    """
    decay_rate = HUNGER_DECAY_RATE.get(stage)

    time_to_zero = - initial / decay_rate
    return time_to_zero



class Timeline:

    def __init__(self, tama):
        """
        Create an instance of Timeline
        :param tama: Defines the Tamagotchi that would be tracked in the Timeline instance
        """
        self.timeline = []
        self.tama = tama

    def add_event(self, timestamp, **kwargs):
        """
Adds an event to the timeline
        :param timestamp: Used to set up a timestamp for the event
        :param timestamp: Used to set up a timestamp for the event - [year, month, day, hour, minute, second]
        :type timestamp: list
        :param kwargs: May have optional parameters such as happiness, hunger and Tamagotchi stage
        :key happiness: Tamagotchi's happiness at the time of the event, should be int
        :key hunger: Tamagotchi's hunger at the time of the event, should be int
        :key stage: Tamagotchi's growth stage, should be "baby", "child", "teen" or "adult"
        :key ate: Food that Tamagotchi ate; is a list - [[food_1, amount_1], [food_2, amount_2], ...]
        :key played_with: Toys that Tamagotchi played with; is a list - [[toy_1, times_played_1], ...]
        :return: None
        """
        event = {
            "timestamp": datetime.datetime(*timestamp),
            "happiness": kwargs.get("happiness", None),
            "hunger": kwargs.get("hunger", None),
            "stage": kwargs.get("stage", None),
            "ate": kwargs.get("ate", None),
            "played_with": kwargs.get("played_with", None),
        }
        self.timeline.append(event)

    def remove_event(self, event):
        """
Removes an event from the timeline
        :param event: The number of the event; the order of events in the timeline starts from 1
        :type event: int
        """
        self.timeline.pop(event - 1)
